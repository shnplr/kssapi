/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigItem struct for ConfigItem
type ConfigItem struct {
	Name *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
	IsDefault *bool `json:"is_default,omitempty"`
	IsReadOnly *bool `json:"is_read_only,omitempty"`
	IsSensitive *bool `json:"is_sensitive,omitempty"`
	Source *string `json:"source,omitempty"`
	Default *bool `json:"default,omitempty"`
	ReadOnly *bool `json:"readOnly,omitempty"`
	Sensitive *bool `json:"sensitive,omitempty"`
}

// NewConfigItem instantiates a new ConfigItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigItem() *ConfigItem {
	this := ConfigItem{}
	return &this
}

// NewConfigItemWithDefaults instantiates a new ConfigItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigItemWithDefaults() *ConfigItem {
	this := ConfigItem{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigItem) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigItem) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigItem) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConfigItem) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConfigItem) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ConfigItem) SetValue(v string) {
	o.Value = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *ConfigItem) GetIsDefault() bool {
	if o == nil || isNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetIsDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.IsDefault) {
    return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *ConfigItem) HasIsDefault() bool {
	if o != nil && !isNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *ConfigItem) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *ConfigItem) GetIsReadOnly() bool {
	if o == nil || isNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.IsReadOnly) {
    return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *ConfigItem) HasIsReadOnly() bool {
	if o != nil && !isNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *ConfigItem) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetIsSensitive returns the IsSensitive field value if set, zero value otherwise.
func (o *ConfigItem) GetIsSensitive() bool {
	if o == nil || isNil(o.IsSensitive) {
		var ret bool
		return ret
	}
	return *o.IsSensitive
}

// GetIsSensitiveOk returns a tuple with the IsSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetIsSensitiveOk() (*bool, bool) {
	if o == nil || isNil(o.IsSensitive) {
    return nil, false
	}
	return o.IsSensitive, true
}

// HasIsSensitive returns a boolean if a field has been set.
func (o *ConfigItem) HasIsSensitive() bool {
	if o != nil && !isNil(o.IsSensitive) {
		return true
	}

	return false
}

// SetIsSensitive gets a reference to the given bool and assigns it to the IsSensitive field.
func (o *ConfigItem) SetIsSensitive(v bool) {
	o.IsSensitive = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ConfigItem) GetSource() string {
	if o == nil || isNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetSourceOk() (*string, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ConfigItem) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ConfigItem) SetSource(v string) {
	o.Source = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ConfigItem) GetDefault() bool {
	if o == nil || isNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.Default) {
    return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ConfigItem) HasDefault() bool {
	if o != nil && !isNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *ConfigItem) SetDefault(v bool) {
	o.Default = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ConfigItem) GetReadOnly() bool {
	if o == nil || isNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetReadOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.ReadOnly) {
    return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ConfigItem) HasReadOnly() bool {
	if o != nil && !isNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *ConfigItem) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *ConfigItem) GetSensitive() bool {
	if o == nil || isNil(o.Sensitive) {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigItem) GetSensitiveOk() (*bool, bool) {
	if o == nil || isNil(o.Sensitive) {
    return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *ConfigItem) HasSensitive() bool {
	if o != nil && !isNil(o.Sensitive) {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *ConfigItem) SetSensitive(v bool) {
	o.Sensitive = &v
}

func (o ConfigItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !isNil(o.IsReadOnly) {
		toSerialize["is_read_only"] = o.IsReadOnly
	}
	if !isNil(o.IsSensitive) {
		toSerialize["is_sensitive"] = o.IsSensitive
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !isNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !isNil(o.Sensitive) {
		toSerialize["sensitive"] = o.Sensitive
	}
	return json.Marshal(toSerialize)
}

type NullableConfigItem struct {
	value *ConfigItem
	isSet bool
}

func (v NullableConfigItem) Get() *ConfigItem {
	return v.value
}

func (v *NullableConfigItem) Set(val *ConfigItem) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigItem) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigItem(val *ConfigItem) *NullableConfigItem {
	return &NullableConfigItem{value: val, isSet: true}
}

func (v NullableConfigItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


