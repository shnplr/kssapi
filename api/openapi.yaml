openapi: 3.0.3
info:
  title: kafka-self-service API
  version: 1.0.0-SNAPSHOT
servers:
- description: Auto generated value
  url: http://localhost:9080
- description: Auto generated value
  url: http://0.0.0.0:9080
paths:
  /apis/authorization/v1/namespaces/{namespace}/localresourceaccessreviews:
    post:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalResourceAccessReview'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAccessReviewResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Authorization Resource
  /apis/authorization/v1/resourceaccessreviews:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceAccessReview'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAccessReviewResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Authorization Resource
  /apis/authorization/v1/selfsubjectaccessreviews:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfSubjectAccessReview'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfSubjectAccessReview'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Authorization Resource
  /apis/authorization/v1/subjectaccessreviews:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectAccessReview'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectAccessReviewResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Authorization Resource
  /apis/kafka.apps/v1/apps:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaApplicationList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Apps Resource
  /apis/kafka.apps/v1/namespaces/{namespace}/apps:
    get:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaApplicationList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Apps Resource
    post:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaApplication'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaApplication'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Already exists
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Apps Resource
  /apis/kafka.apps/v1/namespaces/{namespace}/apps/{name}:
    delete:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaApplication'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Apps Resource
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaApplication'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Apps Resource
    put:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaApplication'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaApplication'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Apps Resource
  /apis/kafka.rbac/v1/namespaces/{namespace}/bindings:
    delete:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RbacRoleBindingRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RbacRoleBindingResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Rbac Resource
    post:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RbacRoleBindingRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RbacRoleBindingResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Rbac Resource
  /apis/kafka.rbac/v1/namespaces/{namespace}/resources:
    get:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: role
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRbacSummaryList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Rbac Resource
  /apis/kafka.rbac/v1/resources:
    get:
      parameters:
      - explode: true
        in: query
        name: role
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRbacSummaryList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Rbac Resource
  /apis/kafka.topic/v1/namespaces/{namespace}/topics:
    get:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaTopicList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
    post:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaTopicRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaTopic'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Already exists
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
  /apis/kafka.topic/v1/namespaces/{namespace}/topics/sync:
    post:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
  /apis/kafka.topic/v1/namespaces/{namespace}/topics/{name}:
    delete:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaTopic'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaTopic'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
  /apis/kafka.topic/v1/namespaces/{namespace}/topics/{name}/configs:alter:
    post:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaTopicRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaTopic'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
  /apis/kafka.topic/v1/namespaces/{namespace}/topics/{name}/describe:
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaTopic'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
  /apis/kafka.topic/v1/topics:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaTopicList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Kafka Topics Resource
  /apis/project/v1/projects:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Projects Resource
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Already exists
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Projects Resource
  /apis/project/v1/projects/{name}:
    delete:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Projects Resource
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Projects Resource
  /apis/rbac.authorization/v1/clusterrolebindings:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterRoleBindingList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
  /apis/rbac.authorization/v1/clusterrolebindings/{name}:
    delete:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterRoleBinding'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
    put:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterRoleBinding'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterRoleBinding'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
  /apis/rbac.authorization/v1/clusterroles:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterRoleList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
  /apis/rbac.authorization/v1/clusterroles/{name}:
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterRole'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
  /apis/rbac.authorization/v1/namespaces/{namespace}/rolebindings:
    get:
      parameters:
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBindingList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
  /apis/rbac.authorization/v1/namespaces/{namespace}/rolebindings/{name}:
    delete:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBinding'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
    put:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleBinding'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBinding'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
  /apis/rbac.authorization/v1/rolebindings:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBindingList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Rbac Auth Resource
  /apis/resources:
    get:
      parameters:
      - explode: true
        in: query
        name: group
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResourceList'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - Apis Resource
  /apis/user/v1/groups:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - User Groups Resource
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Already exists
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - User Groups Resource
  /apis/user/v1/groups/{name}:
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - User Groups Resource
    put:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - User Groups Resource
  /apis/user/v1/users:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - User Groups Resource
  /apis/user/v1/users/{name}:
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Service unavailable
      security:
      - SecurityScheme: []
      tags:
      - User Groups Resource
components:
  schemas:
    ApiResource:
      example:
        shortNames:
        - shortNames
        - shortNames
        kind: kind
        name: name
        verbs:
        - verbs
        - verbs
        version: version
        namespaced: true
        singularName: singularName
        group: group
      properties:
        name:
          type: string
        singularName:
          type: string
        namespaced:
          type: boolean
        group:
          type: string
        version:
          type: string
        kind:
          type: string
        verbs:
          items:
            type: string
          type: array
        shortNames:
          items:
            type: string
          type: array
      type: object
    ApiResourceList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - shortNames:
          - shortNames
          - shortNames
          kind: kind
          name: name
          verbs:
          - verbs
          - verbs
          version: version
          namespaced: true
          singularName: singularName
          group: group
        - shortNames:
          - shortNames
          - shortNames
          kind: kind
          name: name
          verbs:
          - verbs
          - verbs
          version: version
          namespaced: true
          singularName: singularName
          group: group
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/ApiResource'
          type: array
      type: object
    ClusterRole:
      example:
        apiVersion: apiVersion
        kind: kind
        name: name
        namespace: namespace
        rules:
        - resourceNames:
          - resourceNames
          - resourceNames
          resources:
          - resources
          - resources
          verbs:
          - verbs
          - verbs
        - resourceNames:
          - resourceNames
          - resourceNames
          resources:
          - resources
          - resources
          verbs:
          - verbs
          - verbs
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        rules:
          items:
            $ref: '#/components/schemas/PolicyRule'
          type: array
      type: object
    ClusterRoleBinding:
      example:
        apiVersion: apiVersion
        kind: kind
        subjects:
        - kind: kind
          name: name
        - kind: kind
          name: name
        name: name
        namespace: namespace
        roleRef:
          apiGroup: apiGroup
          kind: kind
          name: name
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        roleRef:
          $ref: '#/components/schemas/RoleRef'
        subjects:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
          uniqueItems: true
      required:
      - roleRef
      type: object
    ClusterRoleBindingList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - apiVersion: apiVersion
          kind: kind
          subjects:
          - kind: kind
            name: name
          - kind: kind
            name: name
          name: name
          namespace: namespace
          roleRef:
            apiGroup: apiGroup
            kind: kind
            name: name
        - apiVersion: apiVersion
          kind: kind
          subjects:
          - kind: kind
            name: name
          - kind: kind
            name: name
          name: name
          namespace: namespace
          roleRef:
            apiGroup: apiGroup
            kind: kind
            name: name
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/ClusterRoleBinding'
          type: array
      type: object
    ClusterRoleList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          rules:
          - resourceNames:
            - resourceNames
            - resourceNames
            resources:
            - resources
            - resources
            verbs:
            - verbs
            - verbs
          - resourceNames:
            - resourceNames
            - resourceNames
            resources:
            - resources
            - resources
            verbs:
            - verbs
            - verbs
        - apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          rules:
          - resourceNames:
            - resourceNames
            - resourceNames
            resources:
            - resources
            - resources
            verbs:
            - verbs
            - verbs
          - resourceNames:
            - resourceNames
            - resourceNames
            resources:
            - resources
            - resources
            verbs:
            - verbs
            - verbs
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/ClusterRole'
          type: array
      type: object
    ConfigItem:
      example:
        default: true
        is_sensitive: true
        name: name
        is_read_only: true
        readOnly: true
        source: source
        sensitive: true
        is_default: true
        value: value
      properties:
        name:
          type: string
        value:
          type: string
        is_default:
          type: boolean
        is_read_only:
          type: boolean
        is_sensitive:
          type: boolean
        source:
          type: string
        default:
          type: boolean
        readOnly:
          type: boolean
        sensitive:
          type: boolean
      type: object
    Group:
      example:
        apiVersion: apiVersion
        kind: kind
        name: name
        namespace: namespace
        users:
        - users
        - users
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        users:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    GroupList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          users:
          - users
          - users
        - apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          users:
          - users
          - users
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/Group'
          type: array
      type: object
    KafkaApplication:
      example:
        principal: principal
        idempotent: true
        apiVersion: apiVersion
        kind: kind
        name: name
        namespace: namespace
        type: type
        transactional: true
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        type:
          type: string
        principal:
          pattern: \S
          type: string
        transactional:
          type: boolean
        idempotent:
          type: boolean
      required:
      - principal
      - type
      type: object
    KafkaApplicationList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - principal: principal
          idempotent: true
          apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          type: type
          transactional: true
        - principal: principal
          idempotent: true
          apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          type: type
          transactional: true
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/KafkaApplication'
          type: array
      type: object
    KafkaRbacSummary:
      example:
        principal: principal
        apiVersion: apiVersion
        role: role
        kind: kind
        name: name
        namespace: namespace
        resourceName: resourceName
        patternType: patternType
        resourceType: resourceType
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        principal:
          type: string
        role:
          type: string
        resourceType:
          type: string
        resourceName:
          type: string
        patternType:
          type: string
      type: object
    KafkaRbacSummaryList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - principal: principal
          apiVersion: apiVersion
          role: role
          kind: kind
          name: name
          namespace: namespace
          resourceName: resourceName
          patternType: patternType
          resourceType: resourceType
        - principal: principal
          apiVersion: apiVersion
          role: role
          kind: kind
          name: name
          namespace: namespace
          resourceName: resourceName
          patternType: patternType
          resourceType: resourceType
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/KafkaRbacSummary'
          type: array
      type: object
    KafkaTopic:
      example:
        partitions:
        - leader: 5
          partition: 1
          replicas:
          - 5
          - 5
          topic: topic
          isr:
          - 2
          - 2
        - leader: 5
          partition: 1
          replicas:
          - 5
          - 5
          topic: topic
          isr:
          - 2
          - 2
        configs:
        - default: true
          is_sensitive: true
          name: name
          is_read_only: true
          readOnly: true
          source: source
          sensitive: true
          is_default: true
          value: value
        - default: true
          is_sensitive: true
          name: name
          is_read_only: true
          readOnly: true
          source: source
          sensitive: true
          is_default: true
          value: value
        internal: true
        apiVersion: apiVersion
        partition_count: 0
        replication_factor: 6
        kind: kind
        name: name
        namespace: namespace
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        partition_count:
          format: int32
          type: integer
        replication_factor:
          format: int32
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/ConfigItem'
          type: array
        partitions:
          items:
            $ref: '#/components/schemas/PartitionInfo'
          type: array
        internal:
          type: boolean
      type: object
    KafkaTopicList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - partitions:
          - leader: 5
            partition: 1
            replicas:
            - 5
            - 5
            topic: topic
            isr:
            - 2
            - 2
          - leader: 5
            partition: 1
            replicas:
            - 5
            - 5
            topic: topic
            isr:
            - 2
            - 2
          configs:
          - default: true
            is_sensitive: true
            name: name
            is_read_only: true
            readOnly: true
            source: source
            sensitive: true
            is_default: true
            value: value
          - default: true
            is_sensitive: true
            name: name
            is_read_only: true
            readOnly: true
            source: source
            sensitive: true
            is_default: true
            value: value
          internal: true
          apiVersion: apiVersion
          partition_count: 0
          replication_factor: 6
          kind: kind
          name: name
          namespace: namespace
        - partitions:
          - leader: 5
            partition: 1
            replicas:
            - 5
            - 5
            topic: topic
            isr:
            - 2
            - 2
          - leader: 5
            partition: 1
            replicas:
            - 5
            - 5
            topic: topic
            isr:
            - 2
            - 2
          configs:
          - default: true
            is_sensitive: true
            name: name
            is_read_only: true
            readOnly: true
            source: source
            sensitive: true
            is_default: true
            value: value
          - default: true
            is_sensitive: true
            name: name
            is_read_only: true
            readOnly: true
            source: source
            sensitive: true
            is_default: true
            value: value
          internal: true
          apiVersion: apiVersion
          partition_count: 0
          replication_factor: 6
          kind: kind
          name: name
          namespace: namespace
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/KafkaTopic'
          type: array
      type: object
    KafkaTopicRequest:
      example:
        configs:
        - default: true
          is_sensitive: true
          name: name
          is_read_only: true
          readOnly: true
          source: source
          sensitive: true
          is_default: true
          value: value
        - default: true
          is_sensitive: true
          name: name
          is_read_only: true
          readOnly: true
          source: source
          sensitive: true
          is_default: true
          value: value
        apiVersion: apiVersion
        partition_count: 0
        replication_factor: 0
        kind: kind
        name: name
        namespace: namespace
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        partition_count:
          exclusiveMinimum: true
          format: int32
          minimum: 0
          type: integer
        replication_factor:
          exclusiveMinimum: true
          format: int32
          minimum: 0
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/ConfigItem'
          type: array
      type: object
    LocalResourceAccessReview:
      example:
        path: path
        isNonResourceURL: true
        apiVersion: apiVersion
        nonResourceURL: true
        resource: resource
        kind: kind
        resourceAPIGroup: resourceAPIGroup
        namespace: namespace
        verb: verb
        resourceAPIVersion: resourceAPIVersion
        resourceName: resourceName
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        namespace:
          type: string
        verb:
          pattern: \S
          type: string
        resource:
          pattern: \S
          type: string
        resourceName:
          type: string
        resourceAPIGroup:
          type: string
        resourceAPIVersion:
          type: string
        path:
          type: string
        isNonResourceURL:
          type: boolean
        nonResourceURL:
          type: boolean
      required:
      - resource
      - verb
      type: object
    NonResourceAttributes:
      example:
        path: path
        verb: verb
      properties:
        path:
          type: string
        verb:
          type: string
      type: object
    PartitionInfo:
      example:
        leader: 5
        partition: 1
        replicas:
        - 5
        - 5
        topic: topic
        isr:
        - 2
        - 2
      properties:
        topic:
          type: string
        partition:
          format: int32
          type: integer
        leader:
          format: int32
          type: integer
        replicas:
          items:
            format: int32
            type: integer
          type: array
        isr:
          items:
            format: int32
            type: integer
          type: array
      type: object
    PolicyRule:
      example:
        resourceNames:
        - resourceNames
        - resourceNames
        resources:
        - resources
        - resources
        verbs:
        - verbs
        - verbs
      properties:
        verbs:
          items:
            type: string
          type: array
          uniqueItems: true
        resources:
          items:
            type: string
          type: array
          uniqueItems: true
        resourceNames:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    Project:
      example:
        apiVersion: apiVersion
        kind: kind
        displayName: displayName
        name: name
        namespace: namespace
        description: description
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        description:
          maxLength: 64
          type: string
        displayName:
          maxLength: 64
          type: string
      type: object
    ProjectList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - apiVersion: apiVersion
          kind: kind
          displayName: displayName
          name: name
          namespace: namespace
          description: description
        - apiVersion: apiVersion
          kind: kind
          displayName: displayName
          name: name
          namespace: namespace
          description: description
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/Project'
          type: array
      type: object
    RbacRoleBindingRequest:
      example:
        apiVersion: apiVersion
        role: role
        kind: kind
        topics:
        - topics
        - topics
        subjects:
        - subjects
        - subjects
        name: name
        namespace: namespace
        user: user
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        role:
          pattern: \S
          type: string
        user:
          pattern: \S
          type: string
        topics:
          items:
            type: string
          type: array
        subjects:
          items:
            type: string
          type: array
      required:
      - role
      - user
      type: object
    RbacRoleBindingResponse:
      example:
        principal: principal
        apiVersion: apiVersion
        kind: kind
        name: name
        namespace: namespace
        resources:
        - name: name
          patternType: patternType
          resourceType: resourceType
        - name: name
          patternType: patternType
          resourceType: resourceType
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        principal:
          type: string
        resources:
          items:
            $ref: '#/components/schemas/ResourcePattern'
          type: array
      type: object
    ResourceAccessReview:
      example:
        path: path
        isNonResourceURL: true
        apiVersion: apiVersion
        nonResourceURL: true
        resource: resource
        kind: kind
        resourceAPIGroup: resourceAPIGroup
        namespace: namespace
        verb: verb
        resourceAPIVersion: resourceAPIVersion
        resourceName: resourceName
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        namespace:
          type: string
        verb:
          pattern: \S
          type: string
        resource:
          pattern: \S
          type: string
        resourceName:
          type: string
        resourceAPIGroup:
          type: string
        resourceAPIVersion:
          type: string
        path:
          type: string
        isNonResourceURL:
          type: boolean
        nonResourceURL:
          type: boolean
      required:
      - resource
      - verb
      type: object
    ResourceAccessReviewResponse:
      example:
        apiVersion: apiVersion
        kind: kind
        namespace: namespace
        groups:
        - groups
        - groups
        users:
        - users
        - users
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        namespace:
          type: string
        users:
          items:
            type: string
          type: array
        groups:
          items:
            type: string
          type: array
      type: object
    ResourceAttributes:
      example:
        resource: resource
        subresource: subresource
        namespace: namespace
        verb: verb
        name: name
        version: version
        group: group
      properties:
        namespace:
          type: string
        verb:
          type: string
        group:
          type: string
        version:
          type: string
        resource:
          type: string
        subresource:
          type: string
        name:
          type: string
      type: object
    ResourcePattern:
      example:
        name: name
        patternType: patternType
        resourceType: resourceType
      properties:
        resourceType:
          type: string
        name:
          type: string
        patternType:
          type: string
      type: object
    RoleBinding:
      example:
        apiVersion: apiVersion
        kind: kind
        subjects:
        - kind: kind
          name: name
        - kind: kind
          name: name
        name: name
        namespace: namespace
        roleRef:
          apiGroup: apiGroup
          kind: kind
          name: name
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        roleRef:
          $ref: '#/components/schemas/RoleRef'
        subjects:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
          uniqueItems: true
      required:
      - roleRef
      type: object
    RoleBindingList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - apiVersion: apiVersion
          kind: kind
          subjects:
          - kind: kind
            name: name
          - kind: kind
            name: name
          name: name
          namespace: namespace
          roleRef:
            apiGroup: apiGroup
            kind: kind
            name: name
        - apiVersion: apiVersion
          kind: kind
          subjects:
          - kind: kind
            name: name
          - kind: kind
            name: name
          name: name
          namespace: namespace
          roleRef:
            apiGroup: apiGroup
            kind: kind
            name: name
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/RoleBinding'
          type: array
      type: object
    RoleRef:
      example:
        apiGroup: apiGroup
        kind: kind
        name: name
      properties:
        apiGroup:
          type: string
        kind:
          type: string
        name:
          maxLength: 64
          pattern: \S
          type: string
      required:
      - name
      type: object
    SelfSubjectAccessReview:
      example:
        apiVersion: apiVersion
        kind: kind
        name: name
        namespace: namespace
        spec:
          nonResourceAttributes:
            path: path
            verb: verb
          resourceAttributes:
            resource: resource
            subresource: subresource
            namespace: namespace
            verb: verb
            name: name
            version: version
            group: group
        status:
          reason: reason
          allowed: true
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        spec:
          $ref: '#/components/schemas/SelfSubjectAccessReviewSpec'
        status:
          $ref: '#/components/schemas/SubjectAccessReviewStatus'
      type: object
    SelfSubjectAccessReviewSpec:
      example:
        nonResourceAttributes:
          path: path
          verb: verb
        resourceAttributes:
          resource: resource
          subresource: subresource
          namespace: namespace
          verb: verb
          name: name
          version: version
          group: group
      properties:
        resourceAttributes:
          $ref: '#/components/schemas/ResourceAttributes'
        nonResourceAttributes:
          $ref: '#/components/schemas/NonResourceAttributes'
      type: object
    Status:
      example:
        reason: reason
        apiVersion: apiVersion
        code: 6
        kind: kind
        details:
          kind: kind
          causes:
          - reason: reason
            field: field
            message: message
          - reason: reason
            field: field
            message: message
          retryAfterSeconds: 0
          name: name
          group: group
        message: message
        status: status
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        status:
          type: string
        message:
          type: string
        reason:
          type: string
        details:
          $ref: '#/components/schemas/StatusDetails'
        code:
          format: int32
          type: integer
      type: object
    StatusCause:
      example:
        reason: reason
        field: field
        message: message
      properties:
        reason:
          type: string
        message:
          type: string
        field:
          type: string
      type: object
    StatusDetails:
      example:
        kind: kind
        causes:
        - reason: reason
          field: field
          message: message
        - reason: reason
          field: field
          message: message
        retryAfterSeconds: 0
        name: name
        group: group
      properties:
        name:
          type: string
        group:
          type: string
        kind:
          type: string
        causes:
          items:
            $ref: '#/components/schemas/StatusCause'
          type: array
        retryAfterSeconds:
          format: int32
          type: integer
      type: object
    Subject:
      example:
        kind: kind
        name: name
      properties:
        kind:
          type: string
        name:
          maxLength: 64
          pattern: \S
          type: string
      required:
      - kind
      - name
      type: object
    SubjectAccessReview:
      example:
        path: path
        isNonResourceURL: true
        apiVersion: apiVersion
        nonResourceURL: true
        resource: resource
        kind: kind
        resourceAPIGroup: resourceAPIGroup
        namespace: namespace
        verb: verb
        resourceAPIVersion: resourceAPIVersion
        resourceName: resourceName
        user: user
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        namespace:
          type: string
        verb:
          pattern: \S
          type: string
        resource:
          pattern: \S
          type: string
        resourceName:
          type: string
        resourceAPIGroup:
          type: string
        resourceAPIVersion:
          type: string
        path:
          type: string
        isNonResourceURL:
          type: boolean
        nonResourceURL:
          type: boolean
        user:
          type: string
      required:
      - resource
      - verb
      type: object
    SubjectAccessReviewResponse:
      example:
        apiVersion: apiVersion
        kind: kind
        allowed: true
        namespace: namespace
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        namespace:
          type: string
        allowed:
          type: boolean
      type: object
    SubjectAccessReviewStatus:
      example:
        reason: reason
        allowed: true
      properties:
        allowed:
          type: boolean
        reason:
          type: string
      required:
      - allowed
      type: object
    User:
      description: POJO that represents a single inventory entry.
      example:
        apiVersion: apiVersion
        kind: kind
        name: name
        namespace: namespace
        fullName: xx
        groups:
        - groups
        - groups
        email: email
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        name:
          type: string
        namespace:
          type: string
        fullName:
          default: xx
          type: string
        email:
          type: string
        groups:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    UserList:
      example:
        apiVersion: apiVersion
        kind: kind
        items:
        - apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          fullName: xx
          groups:
          - groups
          - groups
          email: email
        - apiVersion: apiVersion
          kind: kind
          name: name
          namespace: namespace
          fullName: xx
          groups:
          - groups
          - groups
          email: email
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
  securitySchemes:
    SecurityScheme:
      description: Authentication
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/c6198395-22e6-4778-9809-ac8dcfd76901/v2.0/protocol/openid-connect/auth
          refreshUrl: https://login.microsoftonline.com/c6198395-22e6-4778-9809-ac8dcfd76901/v2.0/protocol/openid-connect/token
          scopes: {}
          tokenUrl: https://login.microsoftonline.com/c6198395-22e6-4778-9809-ac8dcfd76901/v2.0/protocol/openid-connect/token/introspect
      type: oauth2
