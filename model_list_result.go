/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ListResult struct for ListResult
type ListResult struct {
	Results []string `json:"results,omitempty"`
}

// NewListResult instantiates a new ListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListResult() *ListResult {
	this := ListResult{}
	return &this
}

// NewListResultWithDefaults instantiates a new ListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListResultWithDefaults() *ListResult {
	this := ListResult{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ListResult) GetResults() []string {
	if o == nil || o.Results == nil {
		var ret []string
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListResult) GetResultsOk() ([]string, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ListResult) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []string and assigns it to the Results field.
func (o *ListResult) SetResults(v []string) {
	o.Results = v
}

func (o ListResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableListResult struct {
	value *ListResult
	isSet bool
}

func (v NullableListResult) Get() *ListResult {
	return v.value
}

func (v *NullableListResult) Set(val *ListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListResult(val *ListResult) *NullableListResult {
	return &NullableListResult{value: val, isSet: true}
}

func (v NullableListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


