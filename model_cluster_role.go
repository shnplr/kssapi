/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClusterRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterRole{}

// ClusterRole struct for ClusterRole
type ClusterRole struct {
	Kind *string `json:"kind,omitempty"`
	Name string `json:"name"`
	Rules []Rule `json:"rules,omitempty"`
}

// NewClusterRole instantiates a new ClusterRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterRole(name string) *ClusterRole {
	this := ClusterRole{}
	this.Name = name
	return &this
}

// NewClusterRoleWithDefaults instantiates a new ClusterRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterRoleWithDefaults() *ClusterRole {
	this := ClusterRole{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ClusterRole) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterRole) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ClusterRole) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ClusterRole) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value
func (o *ClusterRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClusterRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClusterRole) SetName(v string) {
	o.Name = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ClusterRole) GetRules() []Rule {
	if o == nil || IsNil(o.Rules) {
		var ret []Rule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterRole) GetRulesOk() ([]Rule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ClusterRole) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []Rule and assigns it to the Rules field.
func (o *ClusterRole) SetRules(v []Rule) {
	o.Rules = v
}

func (o ClusterRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableClusterRole struct {
	value *ClusterRole
	isSet bool
}

func (v NullableClusterRole) Get() *ClusterRole {
	return v.value
}

func (v *NullableClusterRole) Set(val *ClusterRole) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterRole) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterRole(val *ClusterRole) *NullableClusterRole {
	return &NullableClusterRole{value: val, isSet: true}
}

func (v NullableClusterRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


