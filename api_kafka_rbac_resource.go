/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// KafkaRbacResourceApiService KafkaRbacResourceApi service
type KafkaRbacResourceApiService service

type ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest struct {
	ctx context.Context
	ApiService *KafkaRbacResourceApiService
	name string
	kafkaRbacRequest *KafkaRbacRequest
}

func (r ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest) KafkaRbacRequest(kafkaRbacRequest KafkaRbacRequest) ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest {
	r.kafkaRbacRequest = &kafkaRbacRequest
	return r
}

func (r ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApisKafkaRbacV1NamespacesNameBindingsPostExecute(r)
}

/*
ApisKafkaRbacV1NamespacesNameBindingsPost Method for ApisKafkaRbacV1NamespacesNameBindingsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest
*/
func (a *KafkaRbacResourceApiService) ApisKafkaRbacV1NamespacesNameBindingsPost(ctx context.Context, name string) ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest {
	return ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *KafkaRbacResourceApiService) ApisKafkaRbacV1NamespacesNameBindingsPostExecute(r ApiApisKafkaRbacV1NamespacesNameBindingsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KafkaRbacResourceApiService.ApisKafkaRbacV1NamespacesNameBindingsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kafka.rbac/v1/namespaces/{name}/bindings"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.kafkaRbacRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
