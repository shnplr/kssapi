/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KafkaRbacRequest struct for KafkaRbacRequest
type KafkaRbacRequest struct {
	Principal *string `json:"principal,omitempty"`
	RoleName *string `json:"roleName,omitempty"`
	Topic *string `json:"topic,omitempty"`
}

// NewKafkaRbacRequest instantiates a new KafkaRbacRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaRbacRequest() *KafkaRbacRequest {
	this := KafkaRbacRequest{}
	return &this
}

// NewKafkaRbacRequestWithDefaults instantiates a new KafkaRbacRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaRbacRequestWithDefaults() *KafkaRbacRequest {
	this := KafkaRbacRequest{}
	return &this
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *KafkaRbacRequest) GetPrincipal() string {
	if o == nil || o.Principal == nil {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacRequest) GetPrincipalOk() (*string, bool) {
	if o == nil || o.Principal == nil {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *KafkaRbacRequest) HasPrincipal() bool {
	if o != nil && o.Principal != nil {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *KafkaRbacRequest) SetPrincipal(v string) {
	o.Principal = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *KafkaRbacRequest) GetRoleName() string {
	if o == nil || o.RoleName == nil {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacRequest) GetRoleNameOk() (*string, bool) {
	if o == nil || o.RoleName == nil {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *KafkaRbacRequest) HasRoleName() bool {
	if o != nil && o.RoleName != nil {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *KafkaRbacRequest) SetRoleName(v string) {
	o.RoleName = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *KafkaRbacRequest) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacRequest) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *KafkaRbacRequest) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *KafkaRbacRequest) SetTopic(v string) {
	o.Topic = &v
}

func (o KafkaRbacRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Principal != nil {
		toSerialize["principal"] = o.Principal
	}
	if o.RoleName != nil {
		toSerialize["roleName"] = o.RoleName
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	return json.Marshal(toSerialize)
}

type NullableKafkaRbacRequest struct {
	value *KafkaRbacRequest
	isSet bool
}

func (v NullableKafkaRbacRequest) Get() *KafkaRbacRequest {
	return v.value
}

func (v *NullableKafkaRbacRequest) Set(val *KafkaRbacRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaRbacRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaRbacRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaRbacRequest(val *KafkaRbacRequest) *NullableKafkaRbacRequest {
	return &NullableKafkaRbacRequest{value: val, isSet: true}
}

func (v NullableKafkaRbacRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaRbacRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


