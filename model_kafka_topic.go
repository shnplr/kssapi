/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KafkaTopic struct for KafkaTopic
type KafkaTopic struct {
	Kind *string `json:"kind,omitempty"`
	Name string `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
	PartitionsCount *int32 `json:"partitions_count,omitempty"`
	ReplicationFactor *int32 `json:"replication_factor,omitempty"`
}

// NewKafkaTopic instantiates a new KafkaTopic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaTopic(name string) *KafkaTopic {
	this := KafkaTopic{}
	this.Name = name
	return &this
}

// NewKafkaTopicWithDefaults instantiates a new KafkaTopic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaTopicWithDefaults() *KafkaTopic {
	this := KafkaTopic{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *KafkaTopic) GetKind() string {
	if o == nil || isNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopic) GetKindOk() (*string, bool) {
	if o == nil || isNil(o.Kind) {
    return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *KafkaTopic) HasKind() bool {
	if o != nil && !isNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *KafkaTopic) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value
func (o *KafkaTopic) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KafkaTopic) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KafkaTopic) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *KafkaTopic) GetNamespace() string {
	if o == nil || isNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopic) GetNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.Namespace) {
    return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *KafkaTopic) HasNamespace() bool {
	if o != nil && !isNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *KafkaTopic) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPartitionsCount returns the PartitionsCount field value if set, zero value otherwise.
func (o *KafkaTopic) GetPartitionsCount() int32 {
	if o == nil || isNil(o.PartitionsCount) {
		var ret int32
		return ret
	}
	return *o.PartitionsCount
}

// GetPartitionsCountOk returns a tuple with the PartitionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopic) GetPartitionsCountOk() (*int32, bool) {
	if o == nil || isNil(o.PartitionsCount) {
    return nil, false
	}
	return o.PartitionsCount, true
}

// HasPartitionsCount returns a boolean if a field has been set.
func (o *KafkaTopic) HasPartitionsCount() bool {
	if o != nil && !isNil(o.PartitionsCount) {
		return true
	}

	return false
}

// SetPartitionsCount gets a reference to the given int32 and assigns it to the PartitionsCount field.
func (o *KafkaTopic) SetPartitionsCount(v int32) {
	o.PartitionsCount = &v
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise.
func (o *KafkaTopic) GetReplicationFactor() int32 {
	if o == nil || isNil(o.ReplicationFactor) {
		var ret int32
		return ret
	}
	return *o.ReplicationFactor
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopic) GetReplicationFactorOk() (*int32, bool) {
	if o == nil || isNil(o.ReplicationFactor) {
    return nil, false
	}
	return o.ReplicationFactor, true
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *KafkaTopic) HasReplicationFactor() bool {
	if o != nil && !isNil(o.ReplicationFactor) {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given int32 and assigns it to the ReplicationFactor field.
func (o *KafkaTopic) SetReplicationFactor(v int32) {
	o.ReplicationFactor = &v
}

func (o KafkaTopic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !isNil(o.PartitionsCount) {
		toSerialize["partitions_count"] = o.PartitionsCount
	}
	if !isNil(o.ReplicationFactor) {
		toSerialize["replication_factor"] = o.ReplicationFactor
	}
	return json.Marshal(toSerialize)
}

type NullableKafkaTopic struct {
	value *KafkaTopic
	isSet bool
}

func (v NullableKafkaTopic) Get() *KafkaTopic {
	return v.value
}

func (v *NullableKafkaTopic) Set(val *KafkaTopic) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaTopic(val *KafkaTopic) *NullableKafkaTopic {
	return &NullableKafkaTopic{value: val, isSet: true}
}

func (v NullableKafkaTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


