/*
kafka-self-service API

Testing KafkaApplicationResourceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/shnplr/kssapi"
)

func Test_openapi_KafkaApplicationResourceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KafkaApplicationResourceApiService ApisKafkaAppsV1NamespacesNamespaceAppsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.KafkaApplicationResourceApi.ApisKafkaAppsV1NamespacesNamespaceAppsGet(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaApplicationResourceApiService ApisKafkaAppsV1NamespacesNamespaceAppsNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.KafkaApplicationResourceApi.ApisKafkaAppsV1NamespacesNamespaceAppsNameDelete(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaApplicationResourceApiService ApisKafkaAppsV1NamespacesNamespaceAppsNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.KafkaApplicationResourceApi.ApisKafkaAppsV1NamespacesNamespaceAppsNameGet(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaApplicationResourceApiService ApisKafkaAppsV1NamespacesNamespaceAppsNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.KafkaApplicationResourceApi.ApisKafkaAppsV1NamespacesNamespaceAppsNamePut(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaApplicationResourceApiService ApisKafkaAppsV1NamespacesNamespaceAppsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.KafkaApplicationResourceApi.ApisKafkaAppsV1NamespacesNamespaceAppsPost(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
