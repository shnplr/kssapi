/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KafkaRbacSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaRbacSummary{}

// KafkaRbacSummary struct for KafkaRbacSummary
type KafkaRbacSummary struct {
	Kind *string `json:"kind,omitempty"`
	ApiVersion *string `json:"apiVersion,omitempty"`
	Principal *string `json:"principal,omitempty"`
	Role *string `json:"role,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	ResourceName *string `json:"resourceName,omitempty"`
	PatternType *string `json:"patternType,omitempty"`
}

// NewKafkaRbacSummary instantiates a new KafkaRbacSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaRbacSummary() *KafkaRbacSummary {
	this := KafkaRbacSummary{}
	return &this
}

// NewKafkaRbacSummaryWithDefaults instantiates a new KafkaRbacSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaRbacSummaryWithDefaults() *KafkaRbacSummary {
	this := KafkaRbacSummary{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *KafkaRbacSummary) SetKind(v string) {
	o.Kind = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *KafkaRbacSummary) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *KafkaRbacSummary) SetPrincipal(v string) {
	o.Principal = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *KafkaRbacSummary) SetRole(v string) {
	o.Role = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetMetadata() ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *KafkaRbacSummary) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *KafkaRbacSummary) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName) {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetResourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceName) {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasResourceName() bool {
	if o != nil && !IsNil(o.ResourceName) {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *KafkaRbacSummary) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetPatternType returns the PatternType field value if set, zero value otherwise.
func (o *KafkaRbacSummary) GetPatternType() string {
	if o == nil || IsNil(o.PatternType) {
		var ret string
		return ret
	}
	return *o.PatternType
}

// GetPatternTypeOk returns a tuple with the PatternType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaRbacSummary) GetPatternTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PatternType) {
		return nil, false
	}
	return o.PatternType, true
}

// HasPatternType returns a boolean if a field has been set.
func (o *KafkaRbacSummary) HasPatternType() bool {
	if o != nil && !IsNil(o.PatternType) {
		return true
	}

	return false
}

// SetPatternType gets a reference to the given string and assigns it to the PatternType field.
func (o *KafkaRbacSummary) SetPatternType(v string) {
	o.PatternType = &v
}

func (o KafkaRbacSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaRbacSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.ResourceName) {
		toSerialize["resourceName"] = o.ResourceName
	}
	if !IsNil(o.PatternType) {
		toSerialize["patternType"] = o.PatternType
	}
	return toSerialize, nil
}

type NullableKafkaRbacSummary struct {
	value *KafkaRbacSummary
	isSet bool
}

func (v NullableKafkaRbacSummary) Get() *KafkaRbacSummary {
	return v.value
}

func (v *NullableKafkaRbacSummary) Set(val *KafkaRbacSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaRbacSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaRbacSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaRbacSummary(val *KafkaRbacSummary) *NullableKafkaRbacSummary {
	return &NullableKafkaRbacSummary{value: val, isSet: true}
}

func (v NullableKafkaRbacSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaRbacSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


