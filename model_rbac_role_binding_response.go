/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RbacRoleBindingResponse struct for RbacRoleBindingResponse
type RbacRoleBindingResponse struct {
	Principal *string `json:"principal,omitempty"`
	Role *string `json:"role,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	Name *string `json:"name,omitempty"`
	PatternType *string `json:"pattern_type,omitempty"`
}

// NewRbacRoleBindingResponse instantiates a new RbacRoleBindingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRbacRoleBindingResponse() *RbacRoleBindingResponse {
	this := RbacRoleBindingResponse{}
	return &this
}

// NewRbacRoleBindingResponseWithDefaults instantiates a new RbacRoleBindingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRbacRoleBindingResponseWithDefaults() *RbacRoleBindingResponse {
	this := RbacRoleBindingResponse{}
	return &this
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *RbacRoleBindingResponse) GetPrincipal() string {
	if o == nil || isNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingResponse) GetPrincipalOk() (*string, bool) {
	if o == nil || isNil(o.Principal) {
    return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *RbacRoleBindingResponse) HasPrincipal() bool {
	if o != nil && !isNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *RbacRoleBindingResponse) SetPrincipal(v string) {
	o.Principal = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RbacRoleBindingResponse) GetRole() string {
	if o == nil || isNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingResponse) GetRoleOk() (*string, bool) {
	if o == nil || isNil(o.Role) {
    return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RbacRoleBindingResponse) HasRole() bool {
	if o != nil && !isNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RbacRoleBindingResponse) SetRole(v string) {
	o.Role = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *RbacRoleBindingResponse) GetResourceType() string {
	if o == nil || isNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingResponse) GetResourceTypeOk() (*string, bool) {
	if o == nil || isNil(o.ResourceType) {
    return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *RbacRoleBindingResponse) HasResourceType() bool {
	if o != nil && !isNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *RbacRoleBindingResponse) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RbacRoleBindingResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RbacRoleBindingResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RbacRoleBindingResponse) SetName(v string) {
	o.Name = &v
}

// GetPatternType returns the PatternType field value if set, zero value otherwise.
func (o *RbacRoleBindingResponse) GetPatternType() string {
	if o == nil || isNil(o.PatternType) {
		var ret string
		return ret
	}
	return *o.PatternType
}

// GetPatternTypeOk returns a tuple with the PatternType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingResponse) GetPatternTypeOk() (*string, bool) {
	if o == nil || isNil(o.PatternType) {
    return nil, false
	}
	return o.PatternType, true
}

// HasPatternType returns a boolean if a field has been set.
func (o *RbacRoleBindingResponse) HasPatternType() bool {
	if o != nil && !isNil(o.PatternType) {
		return true
	}

	return false
}

// SetPatternType gets a reference to the given string and assigns it to the PatternType field.
func (o *RbacRoleBindingResponse) SetPatternType(v string) {
	o.PatternType = &v
}

func (o RbacRoleBindingResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if !isNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !isNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.PatternType) {
		toSerialize["pattern_type"] = o.PatternType
	}
	return json.Marshal(toSerialize)
}

type NullableRbacRoleBindingResponse struct {
	value *RbacRoleBindingResponse
	isSet bool
}

func (v NullableRbacRoleBindingResponse) Get() *RbacRoleBindingResponse {
	return v.value
}

func (v *NullableRbacRoleBindingResponse) Set(val *RbacRoleBindingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRbacRoleBindingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRbacRoleBindingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbacRoleBindingResponse(val *RbacRoleBindingResponse) *NullableRbacRoleBindingResponse {
	return &NullableRbacRoleBindingResponse{value: val, isSet: true}
}

func (v NullableRbacRoleBindingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbacRoleBindingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


