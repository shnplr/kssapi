/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Project struct for Project
type Project struct {
	Name *string `json:"name,omitempty"`
	AdminUsers []string `json:"adminUsers,omitempty"`
	EditUsers []string `json:"editUsers,omitempty"`
	ViewUsers []string `json:"viewUsers,omitempty"`
}

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject() *Project {
	this := Project{}
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Project) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Project) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Project) SetName(v string) {
	o.Name = &v
}

// GetAdminUsers returns the AdminUsers field value if set, zero value otherwise.
func (o *Project) GetAdminUsers() []string {
	if o == nil || o.AdminUsers == nil {
		var ret []string
		return ret
	}
	return o.AdminUsers
}

// GetAdminUsersOk returns a tuple with the AdminUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetAdminUsersOk() ([]string, bool) {
	if o == nil || o.AdminUsers == nil {
		return nil, false
	}
	return o.AdminUsers, true
}

// HasAdminUsers returns a boolean if a field has been set.
func (o *Project) HasAdminUsers() bool {
	if o != nil && o.AdminUsers != nil {
		return true
	}

	return false
}

// SetAdminUsers gets a reference to the given []string and assigns it to the AdminUsers field.
func (o *Project) SetAdminUsers(v []string) {
	o.AdminUsers = v
}

// GetEditUsers returns the EditUsers field value if set, zero value otherwise.
func (o *Project) GetEditUsers() []string {
	if o == nil || o.EditUsers == nil {
		var ret []string
		return ret
	}
	return o.EditUsers
}

// GetEditUsersOk returns a tuple with the EditUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetEditUsersOk() ([]string, bool) {
	if o == nil || o.EditUsers == nil {
		return nil, false
	}
	return o.EditUsers, true
}

// HasEditUsers returns a boolean if a field has been set.
func (o *Project) HasEditUsers() bool {
	if o != nil && o.EditUsers != nil {
		return true
	}

	return false
}

// SetEditUsers gets a reference to the given []string and assigns it to the EditUsers field.
func (o *Project) SetEditUsers(v []string) {
	o.EditUsers = v
}

// GetViewUsers returns the ViewUsers field value if set, zero value otherwise.
func (o *Project) GetViewUsers() []string {
	if o == nil || o.ViewUsers == nil {
		var ret []string
		return ret
	}
	return o.ViewUsers
}

// GetViewUsersOk returns a tuple with the ViewUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetViewUsersOk() ([]string, bool) {
	if o == nil || o.ViewUsers == nil {
		return nil, false
	}
	return o.ViewUsers, true
}

// HasViewUsers returns a boolean if a field has been set.
func (o *Project) HasViewUsers() bool {
	if o != nil && o.ViewUsers != nil {
		return true
	}

	return false
}

// SetViewUsers gets a reference to the given []string and assigns it to the ViewUsers field.
func (o *Project) SetViewUsers(v []string) {
	o.ViewUsers = v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.AdminUsers != nil {
		toSerialize["adminUsers"] = o.AdminUsers
	}
	if o.EditUsers != nil {
		toSerialize["editUsers"] = o.EditUsers
	}
	if o.ViewUsers != nil {
		toSerialize["viewUsers"] = o.ViewUsers
	}
	return json.Marshal(toSerialize)
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


