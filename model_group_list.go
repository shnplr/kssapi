/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GroupList struct for GroupList
type GroupList struct {
	Items []Group `json:"items,omitempty"`
}

// NewGroupList instantiates a new GroupList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupList() *GroupList {
	this := GroupList{}
	return &this
}

// NewGroupListWithDefaults instantiates a new GroupList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupListWithDefaults() *GroupList {
	this := GroupList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *GroupList) GetItems() []Group {
	if o == nil || isNil(o.Items) {
		var ret []Group
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupList) GetItemsOk() ([]Group, bool) {
	if o == nil || isNil(o.Items) {
    return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *GroupList) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Group and assigns it to the Items field.
func (o *GroupList) SetItems(v []Group) {
	o.Items = v
}

func (o GroupList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableGroupList struct {
	value *GroupList
	isSet bool
}

func (v NullableGroupList) Get() *GroupList {
	return v.value
}

func (v *NullableGroupList) Set(val *GroupList) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupList) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupList(val *GroupList) *NullableGroupList {
	return &NullableGroupList{value: val, isSet: true}
}

func (v NullableGroupList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


