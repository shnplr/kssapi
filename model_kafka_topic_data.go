/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KafkaTopicData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaTopicData{}

// KafkaTopicData struct for KafkaTopicData
type KafkaTopicData struct {
	Kind *string `json:"kind,omitempty"`
	ApiVersion *string `json:"apiVersion,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	PartitionCount *int32 `json:"partition_count,omitempty"`
	ReplicationFactor *int32 `json:"replication_factor,omitempty"`
	Configs []ConfigItem `json:"configs,omitempty"`
	Partitions []PartitionInfo `json:"partitions,omitempty"`
	Internal *bool `json:"internal,omitempty"`
}

// NewKafkaTopicData instantiates a new KafkaTopicData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaTopicData() *KafkaTopicData {
	this := KafkaTopicData{}
	return &this
}

// NewKafkaTopicDataWithDefaults instantiates a new KafkaTopicData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaTopicDataWithDefaults() *KafkaTopicData {
	this := KafkaTopicData{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *KafkaTopicData) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *KafkaTopicData) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *KafkaTopicData) SetKind(v string) {
	o.Kind = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *KafkaTopicData) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *KafkaTopicData) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *KafkaTopicData) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KafkaTopicData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KafkaTopicData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KafkaTopicData) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *KafkaTopicData) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *KafkaTopicData) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *KafkaTopicData) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPartitionCount returns the PartitionCount field value if set, zero value otherwise.
func (o *KafkaTopicData) GetPartitionCount() int32 {
	if o == nil || IsNil(o.PartitionCount) {
		var ret int32
		return ret
	}
	return *o.PartitionCount
}

// GetPartitionCountOk returns a tuple with the PartitionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetPartitionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PartitionCount) {
		return nil, false
	}
	return o.PartitionCount, true
}

// HasPartitionCount returns a boolean if a field has been set.
func (o *KafkaTopicData) HasPartitionCount() bool {
	if o != nil && !IsNil(o.PartitionCount) {
		return true
	}

	return false
}

// SetPartitionCount gets a reference to the given int32 and assigns it to the PartitionCount field.
func (o *KafkaTopicData) SetPartitionCount(v int32) {
	o.PartitionCount = &v
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise.
func (o *KafkaTopicData) GetReplicationFactor() int32 {
	if o == nil || IsNil(o.ReplicationFactor) {
		var ret int32
		return ret
	}
	return *o.ReplicationFactor
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetReplicationFactorOk() (*int32, bool) {
	if o == nil || IsNil(o.ReplicationFactor) {
		return nil, false
	}
	return o.ReplicationFactor, true
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *KafkaTopicData) HasReplicationFactor() bool {
	if o != nil && !IsNil(o.ReplicationFactor) {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given int32 and assigns it to the ReplicationFactor field.
func (o *KafkaTopicData) SetReplicationFactor(v int32) {
	o.ReplicationFactor = &v
}

// GetConfigs returns the Configs field value if set, zero value otherwise.
func (o *KafkaTopicData) GetConfigs() []ConfigItem {
	if o == nil || IsNil(o.Configs) {
		var ret []ConfigItem
		return ret
	}
	return o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetConfigsOk() ([]ConfigItem, bool) {
	if o == nil || IsNil(o.Configs) {
		return nil, false
	}
	return o.Configs, true
}

// HasConfigs returns a boolean if a field has been set.
func (o *KafkaTopicData) HasConfigs() bool {
	if o != nil && !IsNil(o.Configs) {
		return true
	}

	return false
}

// SetConfigs gets a reference to the given []ConfigItem and assigns it to the Configs field.
func (o *KafkaTopicData) SetConfigs(v []ConfigItem) {
	o.Configs = v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *KafkaTopicData) GetPartitions() []PartitionInfo {
	if o == nil || IsNil(o.Partitions) {
		var ret []PartitionInfo
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetPartitionsOk() ([]PartitionInfo, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *KafkaTopicData) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []PartitionInfo and assigns it to the Partitions field.
func (o *KafkaTopicData) SetPartitions(v []PartitionInfo) {
	o.Partitions = v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *KafkaTopicData) GetInternal() bool {
	if o == nil || IsNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicData) GetInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *KafkaTopicData) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *KafkaTopicData) SetInternal(v bool) {
	o.Internal = &v
}

func (o KafkaTopicData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaTopicData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.PartitionCount) {
		toSerialize["partition_count"] = o.PartitionCount
	}
	if !IsNil(o.ReplicationFactor) {
		toSerialize["replication_factor"] = o.ReplicationFactor
	}
	if !IsNil(o.Configs) {
		toSerialize["configs"] = o.Configs
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	return toSerialize, nil
}

type NullableKafkaTopicData struct {
	value *KafkaTopicData
	isSet bool
}

func (v NullableKafkaTopicData) Get() *KafkaTopicData {
	return v.value
}

func (v *NullableKafkaTopicData) Set(val *KafkaTopicData) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaTopicData) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaTopicData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaTopicData(val *KafkaTopicData) *NullableKafkaTopicData {
	return &NullableKafkaTopicData{value: val, isSet: true}
}

func (v NullableKafkaTopicData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaTopicData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


