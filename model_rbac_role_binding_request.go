/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RbacRoleBindingRequest struct for RbacRoleBindingRequest
type RbacRoleBindingRequest struct {
	Role *string `json:"role,omitempty"`
	User *string `json:"user,omitempty"`
	Resource *string `json:"resource,omitempty"`
}

// NewRbacRoleBindingRequest instantiates a new RbacRoleBindingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRbacRoleBindingRequest() *RbacRoleBindingRequest {
	this := RbacRoleBindingRequest{}
	return &this
}

// NewRbacRoleBindingRequestWithDefaults instantiates a new RbacRoleBindingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRbacRoleBindingRequestWithDefaults() *RbacRoleBindingRequest {
	this := RbacRoleBindingRequest{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RbacRoleBindingRequest) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingRequest) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RbacRoleBindingRequest) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RbacRoleBindingRequest) SetRole(v string) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RbacRoleBindingRequest) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingRequest) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RbacRoleBindingRequest) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RbacRoleBindingRequest) SetUser(v string) {
	o.User = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *RbacRoleBindingRequest) GetResource() string {
	if o == nil || o.Resource == nil {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacRoleBindingRequest) GetResourceOk() (*string, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *RbacRoleBindingRequest) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *RbacRoleBindingRequest) SetResource(v string) {
	o.Resource = &v
}

func (o RbacRoleBindingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableRbacRoleBindingRequest struct {
	value *RbacRoleBindingRequest
	isSet bool
}

func (v NullableRbacRoleBindingRequest) Get() *RbacRoleBindingRequest {
	return v.value
}

func (v *NullableRbacRoleBindingRequest) Set(val *RbacRoleBindingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRbacRoleBindingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRbacRoleBindingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbacRoleBindingRequest(val *RbacRoleBindingRequest) *NullableRbacRoleBindingRequest {
	return &NullableRbacRoleBindingRequest{value: val, isSet: true}
}

func (v NullableRbacRoleBindingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbacRoleBindingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


