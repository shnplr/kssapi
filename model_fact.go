/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Fact struct for Fact
type Fact struct {
	Predicate *string `json:"predicate,omitempty"`
	Args []Value `json:"args,omitempty"`
}

// NewFact instantiates a new Fact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFact() *Fact {
	this := Fact{}
	return &this
}

// NewFactWithDefaults instantiates a new Fact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFactWithDefaults() *Fact {
	this := Fact{}
	return &this
}

// GetPredicate returns the Predicate field value if set, zero value otherwise.
func (o *Fact) GetPredicate() string {
	if o == nil || o.Predicate == nil {
		var ret string
		return ret
	}
	return *o.Predicate
}

// GetPredicateOk returns a tuple with the Predicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fact) GetPredicateOk() (*string, bool) {
	if o == nil || o.Predicate == nil {
		return nil, false
	}
	return o.Predicate, true
}

// HasPredicate returns a boolean if a field has been set.
func (o *Fact) HasPredicate() bool {
	if o != nil && o.Predicate != nil {
		return true
	}

	return false
}

// SetPredicate gets a reference to the given string and assigns it to the Predicate field.
func (o *Fact) SetPredicate(v string) {
	o.Predicate = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *Fact) GetArgs() []Value {
	if o == nil || o.Args == nil {
		var ret []Value
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fact) GetArgsOk() ([]Value, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *Fact) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []Value and assigns it to the Args field.
func (o *Fact) SetArgs(v []Value) {
	o.Args = v
}

func (o Fact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Predicate != nil {
		toSerialize["predicate"] = o.Predicate
	}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	return json.Marshal(toSerialize)
}

type NullableFact struct {
	value *Fact
	isSet bool
}

func (v NullableFact) Get() *Fact {
	return v.value
}

func (v *NullableFact) Set(val *Fact) {
	v.value = val
	v.isSet = true
}

func (v NullableFact) IsSet() bool {
	return v.isSet
}

func (v *NullableFact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFact(val *Fact) *NullableFact {
	return &NullableFact{value: val, isSet: true}
}

func (v NullableFact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


