/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PartitionInfo struct for PartitionInfo
type PartitionInfo struct {
	Topic *string `json:"topic,omitempty"`
	Partition *int32 `json:"partition,omitempty"`
	Leader *int32 `json:"leader,omitempty"`
	Replicas []int32 `json:"replicas,omitempty"`
	Isr []int32 `json:"isr,omitempty"`
}

// NewPartitionInfo instantiates a new PartitionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionInfo() *PartitionInfo {
	this := PartitionInfo{}
	return &this
}

// NewPartitionInfoWithDefaults instantiates a new PartitionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionInfoWithDefaults() *PartitionInfo {
	this := PartitionInfo{}
	return &this
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *PartitionInfo) GetTopic() string {
	if o == nil || isNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetTopicOk() (*string, bool) {
	if o == nil || isNil(o.Topic) {
    return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *PartitionInfo) HasTopic() bool {
	if o != nil && !isNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *PartitionInfo) SetTopic(v string) {
	o.Topic = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *PartitionInfo) GetPartition() int32 {
	if o == nil || isNil(o.Partition) {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetPartitionOk() (*int32, bool) {
	if o == nil || isNil(o.Partition) {
    return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *PartitionInfo) HasPartition() bool {
	if o != nil && !isNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *PartitionInfo) SetPartition(v int32) {
	o.Partition = &v
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *PartitionInfo) GetLeader() int32 {
	if o == nil || isNil(o.Leader) {
		var ret int32
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetLeaderOk() (*int32, bool) {
	if o == nil || isNil(o.Leader) {
    return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *PartitionInfo) HasLeader() bool {
	if o != nil && !isNil(o.Leader) {
		return true
	}

	return false
}

// SetLeader gets a reference to the given int32 and assigns it to the Leader field.
func (o *PartitionInfo) SetLeader(v int32) {
	o.Leader = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *PartitionInfo) GetReplicas() []int32 {
	if o == nil || isNil(o.Replicas) {
		var ret []int32
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetReplicasOk() ([]int32, bool) {
	if o == nil || isNil(o.Replicas) {
    return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *PartitionInfo) HasReplicas() bool {
	if o != nil && !isNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given []int32 and assigns it to the Replicas field.
func (o *PartitionInfo) SetReplicas(v []int32) {
	o.Replicas = v
}

// GetIsr returns the Isr field value if set, zero value otherwise.
func (o *PartitionInfo) GetIsr() []int32 {
	if o == nil || isNil(o.Isr) {
		var ret []int32
		return ret
	}
	return o.Isr
}

// GetIsrOk returns a tuple with the Isr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetIsrOk() ([]int32, bool) {
	if o == nil || isNil(o.Isr) {
    return nil, false
	}
	return o.Isr, true
}

// HasIsr returns a boolean if a field has been set.
func (o *PartitionInfo) HasIsr() bool {
	if o != nil && !isNil(o.Isr) {
		return true
	}

	return false
}

// SetIsr gets a reference to the given []int32 and assigns it to the Isr field.
func (o *PartitionInfo) SetIsr(v []int32) {
	o.Isr = v
}

func (o PartitionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !isNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !isNil(o.Leader) {
		toSerialize["leader"] = o.Leader
	}
	if !isNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !isNil(o.Isr) {
		toSerialize["isr"] = o.Isr
	}
	return json.Marshal(toSerialize)
}

type NullablePartitionInfo struct {
	value *PartitionInfo
	isSet bool
}

func (v NullablePartitionInfo) Get() *PartitionInfo {
	return v.value
}

func (v *NullablePartitionInfo) Set(val *PartitionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionInfo(val *PartitionInfo) *NullablePartitionInfo {
	return &NullablePartitionInfo{value: val, isSet: true}
}

func (v NullablePartitionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


