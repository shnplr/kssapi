/*
kafka-self-service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StatusDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusDetails{}

// StatusDetails struct for StatusDetails
type StatusDetails struct {
	Name *string `json:"name,omitempty"`
	Group *string `json:"group,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Causes []StatusCause `json:"causes,omitempty"`
	RetryAfterSeconds *int32 `json:"retryAfterSeconds,omitempty"`
}

// NewStatusDetails instantiates a new StatusDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusDetails() *StatusDetails {
	this := StatusDetails{}
	return &this
}

// NewStatusDetailsWithDefaults instantiates a new StatusDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusDetailsWithDefaults() *StatusDetails {
	this := StatusDetails{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StatusDetails) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDetails) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StatusDetails) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StatusDetails) SetName(v string) {
	o.Name = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *StatusDetails) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDetails) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *StatusDetails) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *StatusDetails) SetGroup(v string) {
	o.Group = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *StatusDetails) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDetails) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *StatusDetails) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *StatusDetails) SetKind(v string) {
	o.Kind = &v
}

// GetCauses returns the Causes field value if set, zero value otherwise.
func (o *StatusDetails) GetCauses() []StatusCause {
	if o == nil || IsNil(o.Causes) {
		var ret []StatusCause
		return ret
	}
	return o.Causes
}

// GetCausesOk returns a tuple with the Causes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDetails) GetCausesOk() ([]StatusCause, bool) {
	if o == nil || IsNil(o.Causes) {
		return nil, false
	}
	return o.Causes, true
}

// HasCauses returns a boolean if a field has been set.
func (o *StatusDetails) HasCauses() bool {
	if o != nil && !IsNil(o.Causes) {
		return true
	}

	return false
}

// SetCauses gets a reference to the given []StatusCause and assigns it to the Causes field.
func (o *StatusDetails) SetCauses(v []StatusCause) {
	o.Causes = v
}

// GetRetryAfterSeconds returns the RetryAfterSeconds field value if set, zero value otherwise.
func (o *StatusDetails) GetRetryAfterSeconds() int32 {
	if o == nil || IsNil(o.RetryAfterSeconds) {
		var ret int32
		return ret
	}
	return *o.RetryAfterSeconds
}

// GetRetryAfterSecondsOk returns a tuple with the RetryAfterSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDetails) GetRetryAfterSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryAfterSeconds) {
		return nil, false
	}
	return o.RetryAfterSeconds, true
}

// HasRetryAfterSeconds returns a boolean if a field has been set.
func (o *StatusDetails) HasRetryAfterSeconds() bool {
	if o != nil && !IsNil(o.RetryAfterSeconds) {
		return true
	}

	return false
}

// SetRetryAfterSeconds gets a reference to the given int32 and assigns it to the RetryAfterSeconds field.
func (o *StatusDetails) SetRetryAfterSeconds(v int32) {
	o.RetryAfterSeconds = &v
}

func (o StatusDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Causes) {
		toSerialize["causes"] = o.Causes
	}
	if !IsNil(o.RetryAfterSeconds) {
		toSerialize["retryAfterSeconds"] = o.RetryAfterSeconds
	}
	return toSerialize, nil
}

type NullableStatusDetails struct {
	value *StatusDetails
	isSet bool
}

func (v NullableStatusDetails) Get() *StatusDetails {
	return v.value
}

func (v *NullableStatusDetails) Set(val *StatusDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusDetails(val *StatusDetails) *NullableStatusDetails {
	return &NullableStatusDetails{value: val, isSet: true}
}

func (v NullableStatusDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


